{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4NAGMA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAYvC,OACI,8BACI,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,eAsBhBZ,IACfA,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,Y,mCC9BrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACiCC,UAAWH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEbG,EAFa,gBAIGA,EAAIC,OAJP,uBAIXC,EAJW,EAIXA,KAEFC,EAAKD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCqBDO,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNxB,EAAQC,GAAUwB,MACd,SAAAC,GACIH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAACpB,IACGqB,EDhB2BK,CAAa1B,GAAjCa,EADgB,EACtBN,KAAca,EADQ,EACRA,QAEtB,OAAQ,qCACJ,6BAAKpB,IAEDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEf,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEMlBgB,MAnBf,WAAyB,IAAD,EACgB7C,mBAAS,CAAC,cAD1B,mBACb8C,EADa,KACD/C,EADC,KAEpB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAGf+C,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAUA,GADKA,UCR3C6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3a32f691.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats])\n            setInputValue('')\n        }\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}>\n                </input>\n            </form>\n        </div>\n    )\n}\n\nexport default AddCategory;\nAddCategory.protoTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=Yz8gjKyPDXFnPneFkec6NGQSvU5FJD8C`\t;\n    const res= await fetch(url);\n    //asignacion desestructurante\n    const { data }= await res.json();\n \n    const gifs=data.map( img =>{\n        return{\n            id: img.id,\n            title:img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n   \n   return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (<>\n        <h3>{category}</h3>\n        {\n            loading && <p className=\"animate__animated animate__flash\">...loading</p>\n        }\n        <div className=\"card-grid\">\n\n            {\n                images.map((img) => (\n                    <GifGridItem\n                        key={img.id}\n                        {...img} />\n\n                ))\n            }\n\n        </div>\n    </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(\n            imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n\n\n            }\n        )\n    }, [category])\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nfunction GifExpertApp() {\n    const [categories, setCategories] = useState(['One punch']);\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n         \n                    {\n                         categories.map(category =>(\n                            <GifGrid  key={category} \n                            category={category}\n                            />\n                         ))\n                    }\n           \n        </div>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}